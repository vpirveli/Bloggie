@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManger
@inject UserManager<IdentityUser> userManager

@model Bloggie.Web.Models.ViewModels.BloggDetailsViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">

            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between">
                    <div class="mb-3 d-flex">
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="badge bg-secondary me-1">@tag.Name</span>
                        }
                    </div>
                    <div>
                        @if (signInManger.IsSignedIn(User))
                        {
                            @if (Model.Liked)
                            {
                                <a style="cursor: pointer">
                                    <i class="bi bi-hand-thumbs-up-fill" ></i>
                                </a>
                            }
                            else
                            {
                                <a id="btnLike" style="cursor: pointer">
                                    <i class="bi bi-hand-thumbs-up"></i>
                                </a>
                            }

                        }
                        <span id="totalLikes">@Model.TotalLikes</span> Likes
                    </div>
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid fluid" mb-3 />

                <div class="d-flex justify-content-between mb-3 py-2">
                    <span class="fw-bold" action="text-secondary">@Model.Author</span>
                    <span class="fw-bold" action="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>
                        @if (signInManger.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <label class="form-label">Comment Description</label>
                                    <input type="text" class="form-control" asp-for="CommentDescription" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="Id" />
                                    <input type="hidden" asp-for="UrlHandle" />
                                </div>
                            </form>
                        }
                    </div>
                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach (var commet in Model.Comments)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @commet.Description
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@commet.UserName</span>
                                            <span class="text-secondary">@commet.DateAdded.ToShortDateString()</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
            else
            {
                <p>BlogPost not Found!</p>
            }

        </div>
    </div>
</div>

@section Scripts{
    <script>
        const totalLikesElement = document.getElementById("totalLikes");
        const btnLikeElement = document.getElementById("btnLike");

        async function getTotalLikes() {
            fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikesElement.innerHTML = result);
        }

        async function addLikeForBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'Post',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBlog);
                getTotalLikes();
            });
        }

        if (!@Model.Liked.ToString().ToLower()) {
            btnLikeElement.addEventListener('click', addLikeForBlog);
        }

    </script>
}
